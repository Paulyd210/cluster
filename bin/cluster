#!/usr/bin/env php
<?php

$help = <<<EOT
      ____ _ ___   _____ __  __ _____
     / __ `// _ \ / ___// / / // ___/
    / /_/ //  __// /   / /_/ //__  /
    \__,_/ \___//_/    \__, //____/
                      /____/

    -c, --config      Define a custom server config path
    -d, --debug       Start the server in debug mode
    -h, --help        Display the help screen
    -l, --log         Set the minimum log output level (default: warning (debug in debug mode))
    -r, --restart     Restart a running Aerys server with that config
    -u, --user        Indicates to which user the server will switch after startup (under *nix) (overrides Options value).
    -w, --workers     Manually specify worker count (default: CPU core count)
        --color       Use ANSI codes in output (auto|on|off default: auto)

    Example Usage:
    aerys --help
    aerys --color off --log info
    aerys --config /path/to/app/config.php -w 4
    aerys --remote 23456 --log warning


EOT;

// some command line SAPIs (e.g. phpdbg) don't have that function
if (function_exists("cli_set_process_title")) {
    @cli_set_process_title("aerys");
}

error_reporting(E_ALL);

(function () {
    $paths = [
        dirname(__DIR__, 3) . "/autoload.php",
        dirname(__DIR__) . "/vendor/autoload.php",
    ];

    foreach ($paths as $path) {
        if (file_exists($path)) {
            $autoloadPath = $path;
            break;
        }
    }

    if (!isset($autoloadPath)) {
        fwrite(STDERR, "Could not locate autoload.php\n");
        exit(1);
    }

    require $autoloadPath;
})();

$climate = new League\CLImate\CLImate;
$climate->arguments->add([
    "debug" => [
        "prefix"       => "d",
        "longPrefix"   => "debug",
        "description"  => "Start the server in debug mode",
        "noValue"      => true,
    ],
    "help" => [
        "prefix"       => "h",
        "longPrefix"   => "help",
        "description"  => "Display the help screen",
        "noValue"      => true,
    ],
    "log" => [
        "prefix"       => "l",
        "longPrefix"   => "log",
        "description"  => "Set the minimum log output level",
        "defaultValue" => "warning",
    ],
    "workers" => [
        "prefix"       => "w",
        "longPrefix"   => "workers",
        "description"  => "Manually specify worker count",
        "castTo"       => "int",
    ],
    "color" => [
        "longPrefix"   => "color",
        "description"  => "Use ANSI codes in output",
        "castTo"       => "string",
        "defaultValue" => "auto",
    ],
    "config" => [
        "prefix"       => "c",
        "longPrefix"   => "config",
        "description"  => "Define a custom server config path",
    ],
    "restart" => [
        "prefix"       => "r",
        "longPrefix"   => "restart",
        "description"  => "Gracefully restart the workers",
        "noValue"      => true,
    ],
    "user" => [
        "prefix"       => "u",
        "longPrefix"   => "user",
        "description"  => "Indicates the user the server will switch to"
    ]
]);

$console = new Amp\Cluster\Console($climate);

try {
    if ($console->isArgDefined("help")) {
        echo $help;
        exit(0);
    }

    if (!$console->isArgDefined("config")) {
        throw new \Error("A config file must be defined using -c or --config");
    }
} catch (Throwable $e) {
    echo "Invalid arguments: " . $e->getMessage() . "\n\n";
    echo $help;
    exit(1);
}

Amp\Loop::run(function () use ($console) {
    $logger = new Amp\Cluster\ConsoleLogger($console);
    $process = ($console->isArgDefined("debug") || PHP_SAPI === "phpdbg")
        ? new Amp\Cluster\DebugProcess($logger)
        : new Amp\Cluster\WatcherProcess($logger)
    ;
    return $process->start($console);
});
